{"mappings":"YACA,IAAMA,EAAY,CAChBC,KAAMC,SAASC,cAAc,QAC7BC,MAAOF,SAASC,cAAc,gBAC9BE,KAAMH,SAASC,cAAc,eAC7BG,OAAQJ,SAASC,cAAc,iBAC/BI,OAAQL,SAASC,cAAc,WAGjC,SAASK,EAAcC,EAAUL,GAC/B,OAAO,IAAIM,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEF,WAAUL,UAEpBQ,EAAO,CAAEH,WAAUL,S,GAEpBA,E,IAIPJ,EAAUC,KAAKgB,iBAAiB,UAEhC,SAAsBC,GACpBA,EAAMC,iBAKN,IAJA,IAAIC,EAAaC,OAAOrB,EAAUI,MAAMkB,OACpCjB,EAAOgB,OAAOrB,EAAUK,KAAKiB,OAC7BhB,EAASe,OAAOrB,EAAUM,OAAOgB,OAE5BC,EAAI,EAAGA,GAAKjB,EAAQiB,GAAK,EAAG,CAGnCf,EAAce,EAFKH,EAAaf,EAAOkB,GAGpCC,MAAK,SAAAC,G,IAAGhB,EAAQgB,EAARhB,SAAUL,EAAKqB,EAALrB,MACjBsB,QAAQC,IAAI,uBAAwCC,OAAfnB,EAAS,QAAYmB,OAANxB,EAAM,M,IAE3DyB,OAAM,SAAAJ,G,IAAGhB,EAAQgB,EAARhB,SAAUL,EAAKqB,EAALrB,MAClBsB,QAAQC,IAAI,sBAAqCC,OAAfnB,EAAS,QAAYmB,OAANxB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["\nconst selectors = {\n  form: document.querySelector(\"form\"),\n  delay: document.querySelector(\"[name=delay]\"),\n  step: document.querySelector(\"[name=step]\"),\n  amount: document.querySelector(\"[name=amount]\"),\n  button: document.querySelector(\"button\"),\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nselectors.form.addEventListener(\"submit\", handlerClick); //needed for .form\n\nfunction handlerClick(event) {\n  event.preventDefault();\n  let valueDelay = Number(selectors.delay.value);\n  let step = Number(selectors.step.value);\n  let amount = Number(selectors.amount.value);\n\n  for (let i = 1; i <= amount; i += 1) {\n    let promiseDelay = valueDelay + step * i;\n  \n    createPromise(i, promiseDelay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n  }\n}\n\n\n\n\n\n\n\n\n\n  /*\n  -------------------------\n  const isSuccess = true;\n\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    if (isSuccess) {\n      resolve(\"Success! Value passed to resolve function\");\n    } else {\n      reject(\"Error! Error passed to reject function\");\n    }\n  }, 2000);\n});*/\n"],"names":["$ce04d3a99e08e73b$var$selectors","form","document","querySelector","delay","step","amount","button","$ce04d3a99e08e73b$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","valueDelay","Number","value","i","then","param","console","log","concat","catch"],"version":3,"file":"03-promises.3a82e7ee.js.map"}